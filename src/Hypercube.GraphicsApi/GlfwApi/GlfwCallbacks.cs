// ------------------------------------------------------------------------------
// This code was generated by a Hypercube.Generators
// File: glfw3.h
// Path: GlfwCallbacks.g.cs
// ------------------------------------------------------------------------------

using System.Runtime.InteropServices;

// ReSharper disable CommentTypo
// ReSharper disable InconsistentNaming
// ReSharper disable IdentifierTypo

namespace Hypercube.GraphicsApi.GlfwApi;

public static unsafe class GlfwCallbacks
{

    /// <remarks>
    /// <c>
    /// typedef void (*GLFWglproc)(void);
    /// </c>
    /// </remarks>
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void GLProcess();

    /// <remarks>
    /// <c>
    /// typedef void (*GLFWvkproc)(void);
    /// </c>
    /// </remarks>
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void VKProcess();

    /// <remarks>
    /// <c>
    /// typedef void* (* GLFWallocatefun)(size_t size, void* user);
    /// </c>
    /// </remarks>
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void* Allocate(nuint size, void* user);

    /// <remarks>
    /// <c>
    /// typedef void* (* GLFWreallocatefun)(void* block, size_t size, void* user);
    /// </c>
    /// </remarks>
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void* Reallocate(void* block, nuint size, void* user);

    /// <remarks>
    /// <c>
    /// typedef void (* GLFWdeallocatefun)(void* block, void* user);
    /// </c>
    /// </remarks>
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void Deallocate(void* block, void* user);

    /// <remarks>
    /// <c>
    /// typedef void (* GLFWerrorfun)(int error_code, const char* description);
    /// </c>
    /// </remarks>
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void Error(int errorCode, byte* description);

    /// <remarks>
    /// <c>
    /// typedef void (* GLFWwindowposfun)(GLFWwindow* window, int xpos, int ypos);
    /// </c>
    /// </remarks>
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void WindowPosition(nint* window, int xpos, int ypos);

    /// <remarks>
    /// <c>
    /// typedef void (* GLFWwindowsizefun)(GLFWwindow* window, int width, int height);
    /// </c>
    /// </remarks>
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void WindowSize(nint* window, int width, int height);

    /// <remarks>
    /// <c>
    /// typedef void (* GLFWwindowclosefun)(GLFWwindow* window);
    /// </c>
    /// </remarks>
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void WindowClose(nint* window);

    /// <remarks>
    /// <c>
    /// typedef void (* GLFWwindowrefreshfun)(GLFWwindow* window);
    /// </c>
    /// </remarks>
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void WindowRefresh(nint* window);

    /// <remarks>
    /// <c>
    /// typedef void (* GLFWwindowfocusfun)(GLFWwindow* window, int focused);
    /// </c>
    /// </remarks>
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void WindowFocus(nint* window, int focused);

    /// <remarks>
    /// <c>
    /// typedef void (* GLFWwindowiconifyfun)(GLFWwindow* window, int iconified);
    /// </c>
    /// </remarks>
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void WindowIconify(nint* window, int iconified);

    /// <remarks>
    /// <c>
    /// typedef void (* GLFWwindowmaximizefun)(GLFWwindow* window, int maximized);
    /// </c>
    /// </remarks>
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void WindowMaximize(nint* window, int maximized);

    /// <remarks>
    /// <c>
    /// typedef void (* GLFWframebuffersizefun)(GLFWwindow* window, int width, int height);
    /// </c>
    /// </remarks>
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void FrameBufferSize(nint* window, int width, int height);

    /// <remarks>
    /// <c>
    /// typedef void (* GLFWwindowcontentscalefun)(GLFWwindow* window, float xscale, float yscale);
    /// </c>
    /// </remarks>
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void WindowContentScale(nint* window, float xscale, float yscale);

    /// <remarks>
    /// <c>
    /// typedef void (* GLFWmousebuttonfun)(GLFWwindow* window, int button, int action, int mods);
    /// </c>
    /// </remarks>
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void MouseButton(nint* window, int button, int action, int mods);

    /// <remarks>
    /// <c>
    /// typedef void (* GLFWcursorposfun)(GLFWwindow* window, double xpos, double ypos);
    /// </c>
    /// </remarks>
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void CursorPosition(nint* window, double xpos, double ypos);

    /// <remarks>
    /// <c>
    /// typedef void (* GLFWcursorenterfun)(GLFWwindow* window, int entered);
    /// </c>
    /// </remarks>
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void CursorEnter(nint* window, int entered);

    /// <remarks>
    /// <c>
    /// typedef void (* GLFWscrollfun)(GLFWwindow* window, double xoffset, double yoffset);
    /// </c>
    /// </remarks>
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void Scroll(nint* window, double xoffset, double yoffset);

    /// <remarks>
    /// <c>
    /// typedef void (* GLFWkeyfun)(GLFWwindow* window, int key, int scancode, int action, int mods);
    /// </c>
    /// </remarks>
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void Key(nint* window, int key, int scancode, int action, int mods);

    /// <remarks>
    /// <c>
    /// typedef void (* GLFWcharfun)(GLFWwindow* window, unsigned int codepoint);
    /// </c>
    /// </remarks>
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void Char(nint* window, uint codepoint);

    /// <remarks>
    /// <c>
    /// typedef void (* GLFWcharmodsfun)(GLFWwindow* window, unsigned int codepoint, int mods);
    /// </c>
    /// </remarks>
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void CharModification(nint* window, uint codepoint, int mods);

    /// <remarks>
    /// <c>
    /// typedef void (* GLFWdropfun)(GLFWwindow* window, int path_count, const char* paths[]);
    /// </c>
    /// </remarks>
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void Drop(nint* window, int pathCount, byte*[] paths);

    /// <remarks>
    /// <c>
    /// typedef void (* GLFWmonitorfun)(GLFWmonitor* monitor, int event);
    /// </c>
    /// </remarks>
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void Monitor(nint* monitor, int @event);

    /// <remarks>
    /// <c>
    /// typedef void (* GLFWjoystickfun)(int jid, int event);
    /// </c>
    /// </remarks>
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void Joystick(int jid, int @event);
}
