// ------------------------------------------------------------------------------
// This code was generated by a Hypercube.Generators
// File: glfw3.h
// Path: GlfwNative.g.cs
// ------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using JetBrains.Annotations;

// ReSharper disable CommentTypo
// ReSharper disable InconsistentNaming
// ReSharper disable IdentifierTypo

namespace Hypercube.Core.Graphics.Api.GlfwApi;

[PublicAPI]
public static unsafe partial class GlfwNative
{
    public const int True = 1;
    public const int False = 0;

    /// <remarks>
    /// <c>
    /// GLFWAPI int glfwInit(void);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial int glfwInit();

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwTerminate(void);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwTerminate();

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwInitHint(int hint, int value);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwInitHint(int hint, int value);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwInitAllocator(const GLFWallocator* allocator);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwInitAllocator(nint* allocator);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwInitVulkanLoader(PFN_vkGetInstanceProcAddr loader);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwInitVulkanLoader(nint loader);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwGetVersion(int* major, int* minor, int* rev);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwGetVersion(int* major, int* minor, int* rev);

    /// <remarks>
    /// <c>
    /// GLFWAPI const char* glfwGetVersionString(void);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial byte* glfwGetVersionString();

    /// <remarks>
    /// <c>
    /// GLFWAPI int glfwGetError(const char** description);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial int glfwGetError(byte** description);

    /// <remarks>
    /// <c>
    /// GLFWAPI GLFWerrorfun glfwSetErrorCallback(GLFWerrorfun callback);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint glfwSetErrorCallback(nint callback);

    /// <remarks>
    /// <c>
    /// GLFWAPI int glfwGetPlatform(void);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial int glfwGetPlatform();

    /// <remarks>
    /// <c>
    /// GLFWAPI int glfwPlatformSupported(int platform);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial int glfwPlatformSupported(int platform);

    /// <remarks>
    /// <c>
    /// GLFWAPI GLFWmonitor** glfwGetMonitors(int* count);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint** glfwGetMonitors(int* count);

    /// <remarks>
    /// <c>
    /// GLFWAPI GLFWmonitor* glfwGetPrimaryMonitor(void);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint* glfwGetPrimaryMonitor();

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwGetMonitorPos(GLFWmonitor* monitor, int* xpos, int* ypos);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwGetMonitorPos(nint* monitor, int* xpos, int* ypos);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwGetMonitorWorkarea(GLFWmonitor* monitor, int* xpos, int* ypos, int* width, int* height);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwGetMonitorWorkarea(nint* monitor, int* xpos, int* ypos, int* width, int* height);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwGetMonitorPhysicalSize(GLFWmonitor* monitor, int* widthMM, int* heightMM);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwGetMonitorPhysicalSize(nint* monitor, int* widthMM, int* heightMM);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwGetMonitorContentScale(GLFWmonitor* monitor, float* xscale, float* yscale);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwGetMonitorContentScale(nint* monitor, float* xscale, float* yscale);

    /// <remarks>
    /// <c>
    /// GLFWAPI const char* glfwGetMonitorName(GLFWmonitor* monitor);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial byte* glfwGetMonitorName(nint* monitor);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwSetMonitorUserPointer(GLFWmonitor* monitor, void* pointer);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwSetMonitorUserPointer(nint* monitor, void* pointer);

    /// <remarks>
    /// <c>
    /// GLFWAPI void* glfwGetMonitorUserPointer(GLFWmonitor* monitor);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void* glfwGetMonitorUserPointer(nint* monitor);

    /// <remarks>
    /// <c>
    /// GLFWAPI GLFWmonitorfun glfwSetMonitorCallback(GLFWmonitorfun callback);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint glfwSetMonitorCallback(nint callback);

    /// <remarks>
    /// <c>
    /// GLFWAPI const GLFWvidmode* glfwGetVideoModes(GLFWmonitor* monitor, int* count);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint* glfwGetVideoModes(nint* monitor, int* count);

    /// <remarks>
    /// <c>
    /// GLFWAPI const GLFWvidmode* glfwGetVideoMode(GLFWmonitor* monitor);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint* glfwGetVideoMode(nint* monitor);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwSetGamma(GLFWmonitor* monitor, float gamma);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwSetGamma(nint* monitor, float gamma);

    /// <remarks>
    /// <c>
    /// GLFWAPI const GLFWgammaramp* glfwGetGammaRamp(GLFWmonitor* monitor);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint* glfwGetGammaRamp(nint* monitor);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwSetGammaRamp(GLFWmonitor* monitor, const GLFWgammaramp* ramp);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwSetGammaRamp(nint* monitor, nint* ramp);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwDefaultWindowHints(void);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwDefaultWindowHints();

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwWindowHint(int hint, int value);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwWindowHint(int hint, int value);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwWindowHintString(int hint, const char* value);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwWindowHintString(int hint, byte* value);

    /// <remarks>
    /// <c>
    /// GLFWAPI GLFWwindow* glfwCreateWindow(int width, int height, const char* title, GLFWmonitor* monitor, GLFWwindow* share);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint* glfwCreateWindow(int width, int height, byte* title, nint* monitor, nint* share);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwDestroyWindow(GLFWwindow* window);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwDestroyWindow(nint* window);

    /// <remarks>
    /// <c>
    /// GLFWAPI int glfwWindowShouldClose(GLFWwindow* window);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial int glfwWindowShouldClose(nint* window);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwSetWindowShouldClose(GLFWwindow* window, int value);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwSetWindowShouldClose(nint* window, int value);

    /// <remarks>
    /// <c>
    /// GLFWAPI const char* glfwGetWindowTitle(GLFWwindow* window);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial byte* glfwGetWindowTitle(nint* window);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwSetWindowTitle(GLFWwindow* window, const char* title);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwSetWindowTitle(nint* window, byte* title);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwSetWindowIcon(GLFWwindow* window, int count, const GLFWimage* images);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwSetWindowIcon(nint* window, int count, nint* images);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwGetWindowPos(GLFWwindow* window, int* xpos, int* ypos);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwGetWindowPos(nint* window, int* xpos, int* ypos);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwSetWindowPos(GLFWwindow* window, int xpos, int ypos);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwSetWindowPos(nint* window, int xpos, int ypos);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwGetWindowSize(GLFWwindow* window, int* width, int* height);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwGetWindowSize(nint* window, int* width, int* height);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwSetWindowSizeLimits(GLFWwindow* window, int minwidth, int minheight, int maxwidth, int maxheight);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwSetWindowSizeLimits(nint* window, int minwidth, int minheight, int maxwidth, int maxheight);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwSetWindowAspectRatio(GLFWwindow* window, int numer, int denom);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwSetWindowAspectRatio(nint* window, int numer, int denom);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwSetWindowSize(GLFWwindow* window, int width, int height);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwSetWindowSize(nint* window, int width, int height);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwGetFramebufferSize(GLFWwindow* window, int* width, int* height);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwGetFramebufferSize(nint* window, int* width, int* height);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwGetWindowFrameSize(GLFWwindow* window, int* left, int* top, int* right, int* bottom);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwGetWindowFrameSize(nint* window, int* left, int* top, int* right, int* bottom);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwGetWindowContentScale(GLFWwindow* window, float* xscale, float* yscale);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwGetWindowContentScale(nint* window, float* xscale, float* yscale);

    /// <remarks>
    /// <c>
    /// GLFWAPI float glfwGetWindowOpacity(GLFWwindow* window);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial float glfwGetWindowOpacity(nint* window);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwSetWindowOpacity(GLFWwindow* window, float opacity);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwSetWindowOpacity(nint* window, float opacity);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwIconifyWindow(GLFWwindow* window);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwIconifyWindow(nint* window);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwRestoreWindow(GLFWwindow* window);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwRestoreWindow(nint* window);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwMaximizeWindow(GLFWwindow* window);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwMaximizeWindow(nint* window);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwShowWindow(GLFWwindow* window);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwShowWindow(nint* window);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwHideWindow(GLFWwindow* window);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwHideWindow(nint* window);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwFocusWindow(GLFWwindow* window);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwFocusWindow(nint* window);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwRequestWindowAttention(GLFWwindow* window);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwRequestWindowAttention(nint* window);

    /// <remarks>
    /// <c>
    /// GLFWAPI GLFWmonitor* glfwGetWindowMonitor(GLFWwindow* window);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint* glfwGetWindowMonitor(nint* window);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwSetWindowMonitor(GLFWwindow* window, GLFWmonitor* monitor, int xpos, int ypos, int width, int height, int refreshRate);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwSetWindowMonitor(nint* window, nint* monitor, int xpos, int ypos, int width, int height, int refreshRate);

    /// <remarks>
    /// <c>
    /// GLFWAPI int glfwGetWindowAttrib(GLFWwindow* window, int attrib);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial int glfwGetWindowAttrib(nint* window, int attrib);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwSetWindowAttrib(GLFWwindow* window, int attrib, int value);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwSetWindowAttrib(nint* window, int attrib, int value);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwSetWindowUserPointer(GLFWwindow* window, void* pointer);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwSetWindowUserPointer(nint* window, void* pointer);

    /// <remarks>
    /// <c>
    /// GLFWAPI void* glfwGetWindowUserPointer(GLFWwindow* window);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void* glfwGetWindowUserPointer(nint* window);

    /// <remarks>
    /// <c>
    /// GLFWAPI GLFWwindowposfun glfwSetWindowPosCallback(GLFWwindow* window, GLFWwindowposfun callback);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint glfwSetWindowPosCallback(nint* window, nint callback);

    /// <remarks>
    /// <c>
    /// GLFWAPI GLFWwindowsizefun glfwSetWindowSizeCallback(GLFWwindow* window, GLFWwindowsizefun callback);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint glfwSetWindowSizeCallback(nint* window, nint callback);

    /// <remarks>
    /// <c>
    /// GLFWAPI GLFWwindowclosefun glfwSetWindowCloseCallback(GLFWwindow* window, GLFWwindowclosefun callback);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint glfwSetWindowCloseCallback(nint* window, nint callback);

    /// <remarks>
    /// <c>
    /// GLFWAPI GLFWwindowrefreshfun glfwSetWindowRefreshCallback(GLFWwindow* window, GLFWwindowrefreshfun callback);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint glfwSetWindowRefreshCallback(nint* window, nint callback);

    /// <remarks>
    /// <c>
    /// GLFWAPI GLFWwindowfocusfun glfwSetWindowFocusCallback(GLFWwindow* window, GLFWwindowfocusfun callback);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint glfwSetWindowFocusCallback(nint* window, nint callback);

    /// <remarks>
    /// <c>
    /// GLFWAPI GLFWwindowiconifyfun glfwSetWindowIconifyCallback(GLFWwindow* window, GLFWwindowiconifyfun callback);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint glfwSetWindowIconifyCallback(nint* window, nint callback);

    /// <remarks>
    /// <c>
    /// GLFWAPI GLFWwindowmaximizefun glfwSetWindowMaximizeCallback(GLFWwindow* window, GLFWwindowmaximizefun callback);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint glfwSetWindowMaximizeCallback(nint* window, nint callback);

    /// <remarks>
    /// <c>
    /// GLFWAPI GLFWframebuffersizefun glfwSetFramebufferSizeCallback(GLFWwindow* window, GLFWframebuffersizefun callback);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint glfwSetFramebufferSizeCallback(nint* window, nint callback);

    /// <remarks>
    /// <c>
    /// GLFWAPI GLFWwindowcontentscalefun glfwSetWindowContentScaleCallback(GLFWwindow* window, GLFWwindowcontentscalefun callback);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint glfwSetWindowContentScaleCallback(nint* window, nint callback);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwPollEvents(void);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwPollEvents();

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwWaitEvents(void);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwWaitEvents();

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwWaitEventsTimeout(double timeout);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwWaitEventsTimeout(double timeout);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwPostEmptyEvent(void);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwPostEmptyEvent();

    /// <remarks>
    /// <c>
    /// GLFWAPI int glfwGetInputMode(GLFWwindow* window, int mode);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial int glfwGetInputMode(nint* window, int mode);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwSetInputMode(GLFWwindow* window, int mode, int value);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwSetInputMode(nint* window, int mode, int value);

    /// <remarks>
    /// <c>
    /// GLFWAPI int glfwRawMouseMotionSupported(void);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial int glfwRawMouseMotionSupported();

    /// <remarks>
    /// <c>
    /// GLFWAPI const char* glfwGetKeyName(int key, int scancode);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial byte* glfwGetKeyName(int key, int scancode);

    /// <remarks>
    /// <c>
    /// GLFWAPI int glfwGetKeyScancode(int key);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial int glfwGetKeyScancode(int key);

    /// <remarks>
    /// <c>
    /// GLFWAPI int glfwGetKey(GLFWwindow* window, int key);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial int glfwGetKey(nint* window, int key);

    /// <remarks>
    /// <c>
    /// GLFWAPI int glfwGetMouseButton(GLFWwindow* window, int button);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial int glfwGetMouseButton(nint* window, int button);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwGetCursorPos(GLFWwindow* window, double* xpos, double* ypos);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwGetCursorPos(nint* window, double* xpos, double* ypos);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwSetCursorPos(GLFWwindow* window, double xpos, double ypos);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwSetCursorPos(nint* window, double xpos, double ypos);

    /// <remarks>
    /// <c>
    /// GLFWAPI GLFWcursor* glfwCreateCursor(const GLFWimage* image, int xhot, int yhot);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint* glfwCreateCursor(nint* image, int xhot, int yhot);

    /// <remarks>
    /// <c>
    /// GLFWAPI GLFWcursor* glfwCreateStandardCursor(int shape);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint* glfwCreateStandardCursor(int shape);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwDestroyCursor(GLFWcursor* cursor);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwDestroyCursor(nint* cursor);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwSetCursor(GLFWwindow* window, GLFWcursor* cursor);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwSetCursor(nint* window, nint* cursor);

    /// <remarks>
    /// <c>
    /// GLFWAPI GLFWkeyfun glfwSetKeyCallback(GLFWwindow* window, GLFWkeyfun callback);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint glfwSetKeyCallback(nint* window, nint callback);

    /// <remarks>
    /// <c>
    /// GLFWAPI GLFWcharfun glfwSetCharCallback(GLFWwindow* window, GLFWcharfun callback);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint glfwSetCharCallback(nint* window, nint callback);

    /// <remarks>
    /// <c>
    /// GLFWAPI GLFWcharmodsfun glfwSetCharModsCallback(GLFWwindow* window, GLFWcharmodsfun callback);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint glfwSetCharModsCallback(nint* window, nint callback);

    /// <remarks>
    /// <c>
    /// GLFWAPI GLFWmousebuttonfun glfwSetMouseButtonCallback(GLFWwindow* window, GLFWmousebuttonfun callback);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint glfwSetMouseButtonCallback(nint* window, nint callback);

    /// <remarks>
    /// <c>
    /// GLFWAPI GLFWcursorposfun glfwSetCursorPosCallback(GLFWwindow* window, GLFWcursorposfun callback);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint glfwSetCursorPosCallback(nint* window, nint callback);

    /// <remarks>
    /// <c>
    /// GLFWAPI GLFWcursorenterfun glfwSetCursorEnterCallback(GLFWwindow* window, GLFWcursorenterfun callback);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint glfwSetCursorEnterCallback(nint* window, nint callback);

    /// <remarks>
    /// <c>
    /// GLFWAPI GLFWscrollfun glfwSetScrollCallback(GLFWwindow* window, GLFWscrollfun callback);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint glfwSetScrollCallback(nint* window, nint callback);

    /// <remarks>
    /// <c>
    /// GLFWAPI GLFWdropfun glfwSetDropCallback(GLFWwindow* window, GLFWdropfun callback);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint glfwSetDropCallback(nint* window, nint callback);

    /// <remarks>
    /// <c>
    /// GLFWAPI int glfwJoystickPresent(int jid);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial int glfwJoystickPresent(int jid);

    /// <remarks>
    /// <c>
    /// GLFWAPI const float* glfwGetJoystickAxes(int jid, int* count);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial float* glfwGetJoystickAxes(int jid, int* count);

    /// <remarks>
    /// <c>
    /// GLFWAPI const unsigned char* glfwGetJoystickButtons(int jid, int* count);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint* glfwGetJoystickButtons(int jid, int* count);

    /// <remarks>
    /// <c>
    /// GLFWAPI const unsigned char* glfwGetJoystickHats(int jid, int* count);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint* glfwGetJoystickHats(int jid, int* count);

    /// <remarks>
    /// <c>
    /// GLFWAPI const char* glfwGetJoystickName(int jid);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial byte* glfwGetJoystickName(int jid);

    /// <remarks>
    /// <c>
    /// GLFWAPI const char* glfwGetJoystickGUID(int jid);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial byte* glfwGetJoystickGUID(int jid);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwSetJoystickUserPointer(int jid, void* pointer);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwSetJoystickUserPointer(int jid, void* pointer);

    /// <remarks>
    /// <c>
    /// GLFWAPI void* glfwGetJoystickUserPointer(int jid);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void* glfwGetJoystickUserPointer(int jid);

    /// <remarks>
    /// <c>
    /// GLFWAPI int glfwJoystickIsGamepad(int jid);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial int glfwJoystickIsGamepad(int jid);

    /// <remarks>
    /// <c>
    /// GLFWAPI GLFWjoystickfun glfwSetJoystickCallback(GLFWjoystickfun callback);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint glfwSetJoystickCallback(nint callback);

    /// <remarks>
    /// <c>
    /// GLFWAPI int glfwUpdateGamepadMappings(const char* string);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial int glfwUpdateGamepadMappings(byte* str);

    /// <remarks>
    /// <c>
    /// GLFWAPI const char* glfwGetGamepadName(int jid);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial byte* glfwGetGamepadName(int jid);

    /// <remarks>
    /// <c>
    /// GLFWAPI int glfwGetGamepadState(int jid, GLFWgamepadstate* state);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial int glfwGetGamepadState(int jid, nint* state);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwSetClipboardString(GLFWwindow* window, const char* string);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwSetClipboardString(nint* window, byte* str);

    /// <remarks>
    /// <c>
    /// GLFWAPI const char* glfwGetClipboardString(GLFWwindow* window);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial byte* glfwGetClipboardString(nint* window);

    /// <remarks>
    /// <c>
    /// GLFWAPI double glfwGetTime(void);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial double glfwGetTime();

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwSetTime(double time);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwSetTime(double time);

    /// <remarks>
    /// <c>
    /// GLFWAPI uint64_t glfwGetTimerValue(void);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint glfwGetTimerValue();

    /// <remarks>
    /// <c>
    /// GLFWAPI uint64_t glfwGetTimerFrequency(void);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint glfwGetTimerFrequency();

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwMakeContextCurrent(GLFWwindow* window);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwMakeContextCurrent(nint* window);

    /// <remarks>
    /// <c>
    /// GLFWAPI GLFWwindow* glfwGetCurrentContext(void);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint* glfwGetCurrentContext();

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwSwapBuffers(GLFWwindow* window);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwSwapBuffers(nint* window);

    /// <remarks>
    /// <c>
    /// GLFWAPI void glfwSwapInterval(int interval);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial void glfwSwapInterval(int interval);

    /// <remarks>
    /// <c>
    /// GLFWAPI int glfwExtensionSupported(const char* extension);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial int glfwExtensionSupported(byte* extension);

    /// <remarks>
    /// <c>
    /// GLFWAPI GLFWglproc glfwGetProcAddress(const char* procname);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint glfwGetProcAddress(byte* procname);

    /// <remarks>
    /// <c>
    /// GLFWAPI int glfwVulkanSupported(void);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial int glfwVulkanSupported();

    /// <remarks>
    /// <c>
    /// GLFWAPI const char** glfwGetRequiredInstanceExtensions(uint32_t* count);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial byte** glfwGetRequiredInstanceExtensions(nint* count);

    /// <remarks>
    /// <c>
    /// GLFWAPI GLFWvkproc glfwGetInstanceProcAddress(VkInstance instance, const char* procname);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial nint glfwGetInstanceProcAddress(nint instance, byte* procname);

    /// <remarks>
    /// <c>
    /// GLFWAPI int glfwGetPhysicalDevicePresentationSupport(VkInstance instance, VkPhysicalDevice device, uint32_t queuefamily);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial int glfwGetPhysicalDevicePresentationSupport(nint instance, nint device, nint queuefamily);

    /// <remarks>
    /// <c>
    /// GLFWAPI VkResult glfwCreateWindowSurface(VkInstance instance, GLFWwindow* window, const VkAllocationCallbacks* allocator, VkSurfaceKHR* surface);
    /// </c>
    /// </remarks>
    [LibraryImport("glfw3.dll")]
    public static partial int glfwCreateWindowSurface(nint instance, nint* window, nint* allocator, nint* surface);
}
